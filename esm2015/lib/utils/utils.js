const ɵ0 = function ($element, position) {
    $element.style.left = position.x + 'px';
    $element.style.top = position.y + 'px';
}, ɵ1 = function ($element) {
    $element.style.left = '';
    $element.style.top = '';
}, ɵ2 = function ($element, position) {
    const left = position.x;
    const top = position.y;
    // Replace unitless items with px
    const translate = `translate(${left}px,${top}px)`;
    $element.style['transform'] = translate;
    $element.style['WebkitTransform'] = translate;
    $element.style['MozTransform'] = translate;
    $element.style['msTransform'] = translate;
    $element.style['OTransform'] = translate;
}, ɵ3 = function ($element) {
    $element.style['transform'] = '';
    $element.style['WebkitTransform'] = '';
    $element.style['MozTransform'] = '';
    $element.style['msTransform'] = '';
    $element.style['OTransform'] = '';
}, ɵ4 = () => {
    if (document['selection']) {
        document['selection'].empty();
    }
    else if (window.getSelection) {
        window.getSelection().removeAllRanges();
    }
}, ɵ5 = function (element, containerEl) {
    const containerRect = containerEl.getBoundingClientRect();
    const elRect = element.getBoundingClientRect();
    return elRect.left > containerRect.left &&
        elRect.right < containerRect.right &&
        elRect.top > containerRect.top &&
        elRect.bottom < containerRect.bottom;
}, ɵ6 = function (element, containerEl) {
    const containerRect = containerEl.getBoundingClientRect();
    const elRect = element.getBoundingClientRect();
    const elWidth = elRect.right - elRect.left;
    const elHeight = elRect.bottom - elRect.top;
    return (elRect.left + (elWidth / 2)) > containerRect.left &&
        (elRect.right - (elWidth / 2)) < containerRect.right &&
        (elRect.top + (elHeight / 2)) > containerRect.top &&
        (elRect.bottom - (elHeight / 2)) < containerRect.bottom;
}, ɵ7 = function (element, containerEl) {
    const containerRect = containerEl.getBoundingClientRect();
    const elRect = element.getBoundingClientRect();
    return elRect.right > containerRect.left &&
        elRect.bottom > containerRect.top &&
        elRect.left < containerRect.right &&
        elRect.top < containerRect.bottom;
}, ɵ8 = function (event, element) {
    const elRect = element.getBoundingClientRect();
    return event.pageX > elRect.left &&
        event.pageX < elRect.right &&
        event.pageY > elRect.top &&
        event.pageY < elRect.bottom;
}, ɵ9 = function ($element) {
    const styleObj = window.getComputedStyle($element);
    // NOTE: Manually calculating height because IE's `clientHeight` isn't always
    // reliable.
    return parseFloat(styleObj.getPropertyValue('height')) +
        parseFloat(styleObj.getPropertyValue('padding-top')) +
        parseFloat(styleObj.getPropertyValue('padding-bottom'));
}, ɵ10 = (element, parentElement) => {
    const parentElementRect = parentElement.getBoundingClientRect();
    const elementRect = element.getBoundingClientRect();
    return {
        top: elementRect.top - parentElementRect.top,
        left: elementRect.left - parentElementRect.left
    };
};
export const utils = {
    setCssElementPosition: ɵ0,
    resetCSSElementPosition: ɵ1,
    setTransform: ɵ2,
    resetTransform: ɵ3,
    clearSelection: ɵ4,
    isElementFitContainer: ɵ5,
    isElementIntersectContainer: ɵ6,
    isElementTouchContainer: ɵ7,
    isCursorAboveElement: ɵ8,
    getElementOuterHeight: ɵ9,
    getRelativeCoordinates: ɵ10,
    getScrollableContainer(node) {
        const regex = /(auto|scroll)/;
        const parents = (_node, ps) => {
            if (_node.parentNode === null) {
                return ps;
            }
            return parents(_node.parentNode, ps.concat([_node]));
        };
        const style = (_node, prop) => {
            return getComputedStyle(_node, null).getPropertyValue(prop);
        };
        const overflow = _node => {
            return (style(_node, 'overflow') + style(_node, 'overflow-y') + style(_node, 'overflow-x'));
        };
        const scroll = _node => regex.test(overflow(_node));
        /* eslint-disable consistent-return */
        const scrollParent = _node => {
            if (!(_node instanceof HTMLElement || _node instanceof SVGElement)) {
                return;
            }
            const ps = parents(_node.parentNode, []);
            for (let i = 0; i < ps.length; i += 1) {
                if (scroll(ps[i])) {
                    return ps[i];
                }
            }
            return document.scrollingElement || document.documentElement;
        };
        return scrollParent(node);
    }
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMmdyaWRzdGVyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJXQUkyQixVQUFVLFFBQXFCLEVBQUUsUUFBZ0M7SUFDcEYsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDeEMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDM0MsQ0FBQyxPQUN3QixVQUFVLFFBQXFCO0lBQ3BELFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUN6QixRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDNUIsQ0FBQyxPQUNhLFVBQVUsUUFBcUIsRUFBRSxRQUFnQztJQUMzRSxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3hCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFFdkIsaUNBQWlDO0lBQ2pDLE1BQU0sU0FBUyxHQUFHLGFBQWEsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBRWxELFFBQVEsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQ2xDLFFBQVEsQ0FBQyxLQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDL0MsUUFBUSxDQUFDLEtBQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDNUMsUUFBUSxDQUFDLEtBQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDM0MsUUFBUSxDQUFDLEtBQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDcEQsQ0FBQyxPQUNlLFVBQVUsUUFBcUI7SUFDM0MsUUFBUSxDQUFDLEtBQUssQ0FBQyxX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Q0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDbkMsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2YsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2hCO2FBQ0o7WUFFRCxPQUFPLFFBQVEsQ0FBQyxnQkFBZ0IsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDO1FBQ2pFLENBQUMsQ0FBQztRQUVGLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBEcmFnZ2FibGVFdmVudCB9IGZyb20gJy4vRHJhZ2dhYmxlRXZlbnQnO1xuXG5leHBvcnQgY29uc3QgdXRpbHMgPSB7XG4gICAgc2V0Q3NzRWxlbWVudFBvc2l0aW9uOiBmdW5jdGlvbiAoJGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBwb3NpdGlvbjoge3g6IG51bWJlciwgeTogbnVtYmVyfSkge1xuICAgICAgICAkZWxlbWVudC5zdHlsZS5sZWZ0ID0gcG9zaXRpb24ueCArICdweCc7XG4gICAgICAgICRlbGVtZW50LnN0eWxlLnRvcCA9IHBvc2l0aW9uLnkgKyAncHgnO1xuICAgIH0sXG4gICAgcmVzZXRDU1NFbGVtZW50UG9zaXRpb246IGZ1bmN0aW9uICgkZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgJGVsZW1lbnQuc3R5bGUubGVmdCA9ICcnO1xuICAgICAgICAkZWxlbWVudC5zdHlsZS50b3AgPSAnJztcbiAgICB9LFxuICAgIHNldFRyYW5zZm9ybTogZnVuY3Rpb24gKCRlbGVtZW50OiBIVE1MRWxlbWVudCwgcG9zaXRpb246IHt4OiBudW1iZXIsIHk6IG51bWJlcn0pIHtcbiAgICAgICAgY29uc3QgbGVmdCA9IHBvc2l0aW9uLng7XG4gICAgICAgIGNvbnN0IHRvcCA9IHBvc2l0aW9uLnk7XG5cbiAgICAgICAgLy8gUmVwbGFjZSB1bml0bGVzcyBpdGVtcyB3aXRoIHB4XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IGB0cmFuc2xhdGUoJHtsZWZ0fXB4LCR7dG9wfXB4KWA7XG5cbiAgICAgICAgJGVsZW1lbnQuc3R5bGVbJ3RyYW5zZm9ybSddID0gdHJhbnNsYXRlO1xuICAgICAgICAoPGFueT4kZWxlbWVudC5zdHlsZSlbJ1dlYmtpdFRyYW5zZm9ybSddID0gdHJhbnNsYXRlO1xuICAgICAgICAoPGFueT4kZWxlbWVudC5zdHlsZSlbJ01velRyYW5zZm9ybSddID0gdHJhbnNsYXRlO1xuICAgICAgICAoPGFueT4kZWxlbWVudC5zdHlsZSlbJ21zVHJhbnNmb3JtJ10gPSB0cmFuc2xhdGU7XG4gICAgICAgICg8YW55PiRlbGVtZW50LnN0eWxlKVsnT1RyYW5zZm9ybSddID0gdHJhbnNsYXRlO1xuICAgIH0sXG4gICAgcmVzZXRUcmFuc2Zvcm06IGZ1bmN0aW9uICgkZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgJGVsZW1lbnQuc3R5bGVbJ3RyYW5zZm9ybSddID0gJyc7XG4gICAgICAgICg8YW55PiRlbGVtZW50LnN0eWxlKVsnV2Via2l0VHJhbnNmb3JtJ10gPSAnJztcbiAgICAgICAgKDxhbnk+JGVsZW1lbnQuc3R5bGUpWydNb3pUcmFuc2Zvcm0nXSA9ICcnO1xuICAgICAgICAoPGFueT4kZWxlbWVudC5zdHlsZSlbJ21zVHJhbnNmb3JtJ10gPSAnJztcbiAgICAgICAgKDxhbnk+JGVsZW1lbnQuc3R5bGUpWydPVHJhbnNmb3JtJ10gPSAnJztcbiAgICB9LFxuICAgIGNsZWFyU2VsZWN0aW9uOiAoKSA9PiB7XG4gICAgICAgIGlmICgoPGFueT5kb2N1bWVudClbJ3NlbGVjdGlvbiddKSB7XG4gICAgICAgICAgICAoPGFueT5kb2N1bWVudClbJ3NlbGVjdGlvbiddLmVtcHR5KCk7XG4gICAgICAgIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgICAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBpc0VsZW1lbnRGaXRDb250YWluZXI6IGZ1bmN0aW9uIChlbGVtZW50OiBIVE1MRWxlbWVudCwgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lclJlY3QgPSBjb250YWluZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgZWxSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICByZXR1cm4gZWxSZWN0LmxlZnQgPiBjb250YWluZXJSZWN0LmxlZnQgJiZcbiAgICAgICAgICAgIGVsUmVjdC5yaWdodCA8IGNvbnRhaW5lclJlY3QucmlnaHQgJiZcbiAgICAgICAgICAgIGVsUmVjdC50b3AgPiBjb250YWluZXJSZWN0LnRvcCAmJlxuICAgICAgICAgICAgZWxSZWN0LmJvdHRvbSA8IGNvbnRhaW5lclJlY3QuYm90dG9tO1xuICAgIH0sXG4gICAgaXNFbGVtZW50SW50ZXJzZWN0Q29udGFpbmVyOiBmdW5jdGlvbiAoZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBjb250YWluZXJSZWN0ID0gY29udGFpbmVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGVsUmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgY29uc3QgZWxXaWR0aCA9IGVsUmVjdC5yaWdodCAtIGVsUmVjdC5sZWZ0O1xuICAgICAgICBjb25zdCBlbEhlaWdodCA9IGVsUmVjdC5ib3R0b20gLSBlbFJlY3QudG9wO1xuXG4gICAgICAgIHJldHVybiAoZWxSZWN0LmxlZnQgKyAoZWxXaWR0aCAvIDIpKSA+IGNvbnRhaW5lclJlY3QubGVmdCAmJlxuICAgICAgICAgICAgKGVsUmVjdC5yaWdodCAtIChlbFdpZHRoIC8gMikpIDwgY29udGFpbmVyUmVjdC5yaWdodCAmJlxuICAgICAgICAgICAgKGVsUmVjdC50b3AgKyAoZWxIZWlnaHQgLyAyKSkgPiBjb250YWluZXJSZWN0LnRvcCAmJlxuICAgICAgICAgICAgKGVsUmVjdC5ib3R0b20gLSAoZWxIZWlnaHQgLyAyKSkgPCBjb250YWluZXJSZWN0LmJvdHRvbTtcbiAgICB9LFxuICAgIGlzRWxlbWVudFRvdWNoQ29udGFpbmVyOiBmdW5jdGlvbiAoZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBjb250YWluZXJSZWN0ID0gY29udGFpbmVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGVsUmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgcmV0dXJuIGVsUmVjdC5yaWdodCA+IGNvbnRhaW5lclJlY3QubGVmdCAmJlxuICAgICAgICAgICAgZWxSZWN0LmJvdHRvbSA+IGNvbnRhaW5lclJlY3QudG9wICYmXG4gICAgICAgICAgICBlbFJlY3QubGVmdCA8IGNvbnRhaW5lclJlY3QucmlnaHQgJiZcbiAgICAgICAgICAgIGVsUmVjdC50b3AgPCBjb250YWluZXJSZWN0LmJvdHRvbTtcbiAgICB9LFxuICAgIGlzQ3Vyc29yQWJvdmVFbGVtZW50OiBmdW5jdGlvbiAoZXZlbnQ6IERyYWdnYWJsZUV2ZW50LCBlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBlbFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIHJldHVybiBldmVudC5wYWdlWCA+IGVsUmVjdC5sZWZ0ICYmXG4gICAgICAgICAgICBldmVudC5wYWdlWCA8IGVsUmVjdC5yaWdodCAmJlxuICAgICAgICAgICAgZXZlbnQucGFnZVkgPiBlbFJlY3QudG9wICYmXG4gICAgICAgICAgICBldmVudC5wYWdlWSA8IGVsUmVjdC5ib3R0b207XG4gICAgfSxcbiAgICBnZXRFbGVtZW50T3V0ZXJIZWlnaHQ6IGZ1bmN0aW9uICgkZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3Qgc3R5bGVPYmogPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkZWxlbWVudCk7XG4gICAgICAgIC8vIE5PVEU6IE1hbnVhbGx5IGNhbGN1bGF0aW5nIGhlaWdodCBiZWNhdXNlIElFJ3MgYGNsaWVudEhlaWdodGAgaXNuJ3QgYWx3YXlzXG4gICAgICAgIC8vIHJlbGlhYmxlLlxuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZU9iai5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSkgK1xuICAgICAgICAgICAgcGFyc2VGbG9hdChzdHlsZU9iai5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXRvcCcpKSArXG4gICAgICAgICAgICBwYXJzZUZsb2F0KHN0eWxlT2JqLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctYm90dG9tJykpO1xuICAgIH0sXG4gICAgZ2V0UmVsYXRpdmVDb29yZGluYXRlczogKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCk6IHt0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyfSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnRSZWN0ID0gcGFyZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgZWxlbWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IGVsZW1lbnRSZWN0LnRvcCAtIHBhcmVudEVsZW1lbnRSZWN0LnRvcCxcbiAgICAgICAgICAgIGxlZnQ6IGVsZW1lbnRSZWN0LmxlZnQgLSBwYXJlbnRFbGVtZW50UmVjdC5sZWZ0XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBnZXRTY3JvbGxhYmxlQ29udGFpbmVyKG5vZGUpIHtcbiAgICAgICAgY29uc3QgcmVnZXggPSAvKGF1dG98c2Nyb2xsKS87XG4gICAgICAgIGNvbnN0IHBhcmVudHMgPSAoX25vZGUsIHBzKSA9PiB7XG4gICAgICAgICAgICBpZiAoX25vZGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRzKF9ub2RlLnBhcmVudE5vZGUsIHBzLmNvbmNhdChbX25vZGVdKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc3R5bGUgPSAoX25vZGUsIHByb3ApID0+IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKF9ub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvdmVyZmxvdyA9IF9ub2RlID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgc3R5bGUoX25vZGUsICdvdmVyZmxvdycpICsgc3R5bGUoX25vZGUsICdvdmVyZmxvdy15JykgKyBzdHlsZShfbm9kZSwgJ292ZXJmbG93LXgnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc2Nyb2xsID0gX25vZGUgPT4gcmVnZXgudGVzdChvdmVyZmxvdyhfbm9kZSkpO1xuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG4gICAgICAgIGNvbnN0IHNjcm9sbFBhcmVudCA9IF9ub2RlID0+IHtcbiAgICAgICAgICAgIGlmICghKF9ub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgX25vZGUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcHMgPSBwYXJlbnRzKF9ub2RlLnBhcmVudE5vZGUsIFtdKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChzY3JvbGwocHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2Nyb2xsUGFyZW50KG5vZGUpO1xuICAgIH1cbn07XG4iXX0=