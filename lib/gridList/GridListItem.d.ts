import { GridsterItemComponent } from '../gridster-item/gridster-item.component';
import { GridsterItemPrototypeDirective } from '../gridster-prototype/gridster-item-prototype.directive';
import { GridsterService } from '../gridster.service';
export declare class GridListItem {
    static BREAKPOINTS: Array<string>;
    static X_PROPERTY_MAP: any;
    static Y_PROPERTY_MAP: any;
    static W_PROPERTY_MAP: any;
    static H_PROPERTY_MAP: any;
    itemComponent: GridsterItemComponent;
    itemPrototype: GridsterItemPrototypeDirective;
    itemObject: any;
    get $element(): any;
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get w(): number;
    set w(value: number);
    get h(): number;
    set h(value: number);
    get autoSize(): boolean;
    set autoSize(value: boolean);
    get dragAndDrop(): boolean;
    get resizable(): boolean;
    get positionX(): number;
    get positionY(): number;
    get variableHeight(): boolean;
    get contentHeight(): number;
    constructor();
    setFromGridsterItem(item: GridsterItemComponent): GridListItem;
    setFromGridsterItemPrototype(item: GridsterItemPrototypeDirective): GridListItem;
    setFromObjectLiteral(item: Object): GridListItem;
    copy(): GridListItem;
    copyForBreakpoint(breakpoint?: string): GridListItem;
    getValueX(breakpoint?: string): any;
    getValueY(breakpoint?: string): any;
    getValueW(breakpoint?: string): any;
    getValueH(breakpoint?: string): any;
    setValueX(value: number, breakpoint?: string): void;
    setValueY(value: number, breakpoint?: string): void;
    setValueW(value: number, breakpoint?: string): void;
    setValueH(value: number, breakpoint?: string): void;
    triggerChangeX(breakpoint?: string): void;
    triggerChangeY(breakpoint?: string): void;
    triggerChangeW(breakpoint?: string): void;
    triggerChangeH(breakpoint?: string): void;
    hasPositions(breakpoint?: string): any;
    applyPosition(gridster?: GridsterService): void;
    calculatePosition(gridster?: GridsterService): {
        left: number;
        top: number;
    };
    applySize(gridster?: GridsterService): void;
    calculateSize(gridster?: GridsterService): {
        width: number;
        height: number;
    };
    private getXProperty;
    private getYProperty;
    private getWProperty;
    private getHProperty;
    private getItem;
    private isItemSet;
}
